QUESTION-->
We are given a row-wise sorted matrix of size r*c, we need to find the median of the matrix given. It is assumed that r*c is always odd.

Examples: 
(1)
Input : 1 3 5
        2 6 9
        3 6 9
Output : Median is 5
If we put all the values in a sorted 
array A[] = {1 2 3 3 5 6 6 9 9}
(2)
Input: 1 3 4
       2 5 6
       7 8 9
Output: Median is 5


APPROACH--->(Brute force)
The idea is to traverse the matrix and store all the elements of the matrix in an array
After doing so just sort the matrix and return its middle element i.e. arr[n/2].
-------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;



int medianmatrix(vector<vector<int>> &matrix,int r,int c){
	int k = 0;
	int arr[(r*c)+1];
	for(int i = 0;i<r;i++){
		for(int j = 0;j<c;j++){
			arr[k] = matrix[i][j];		//storing the array elements
			k++;
		}
	}

	sort(arr,arr+k);		//sorting array
	return arr[k/2];		//returning its mid
}
int main(){
	int r,c;
	cin>>r>>c;
	vector<vector<int>> matrix(r,matrix<int>(x));		//declaring a 2d vector
	for(int i = 0;i<r;i++){
		for(int j = 0;j<c;j++){
			cin>>matrix[i][j];
		}
	}

	cout<<"The median of matrix is : "<<medianmatrix(matrix,r,c)<<endl;
	return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------

APPROACH--->Optimized (Using Binary Search)
As the row elements are in sorted order we can implement binary search in this problem.
The idea is to set
low = 1;		
high = MAX_INT;		//search space (Our numbers will lie in this range).

now we will make a variable which stores the no. of elements before actual median.
desired = number of elements/2;

desired = (row*col)/2
Ex->
their are 9 elements-
e e e e m e e e e   //we can see thier are 4 elements before median (i.e. (row*col)/2  for a matrix)

we will cal. mid and check the number of elements lesser than equal to our mid in each row of matrix and maintain its count.

after this we will check if our count is less than or equal to desired value if so,
we will move towards right side (i.e low = mid + 1)

else we will move towards left side (high = mid-1)
At last our low will be pointing to the median when binary search loop breaks

we will find the count of mid by binary search
--------------------------------------------------------------------------------------------------------------------------------------------------------------
#include<bits/stdc++.h>
using namespace std;

int lesser_than_equal_to_mid(vector<int> matrix,int element){
	int low = 0;
	int high = matrix.size()-1;
	while(low<=high){				//Finding the number of elements lesser or equal to
		int mid = (low+high)/2;
		if(matrix[mid]>element){
			high = mid - 1;
		}
		else{
			low = mid + 1;
		}
	}
	return low;		//low will be pointing to the first value greater than element
}
int medianmatrix(vector<vector<int>> &matrix,int r,int c){
	int low  = 1;
	int high = INT_MAX;    //we could also set high to the max element of array
	int desired  = (r*c)/2;
	while(low<=high){
		int mid = (low+high)/2;
		int count = 0;
		for(int i = 0;i<r;i++){
			count = count + lesser_than_equal_to_mid(matrix[i],mid);		//counting the number of elements less or equal than mid
												//in each row
		}
		if(count<=desired){		
			low = mid+1;
		}
		else{
			high = mid-1;
		}	
	}
	return low;
}
int main(){
	int r,c;
	cin>>r>>c;
	vector<vector<int>> matrix(r,matrix<int>(x));		//declaring a 2d vector
	for(int i = 0;i<r;i++){
		for(int j = 0;j<c;j++){
			cin>>matrix[i][j];
		}
	}

	cout<<"The median of matrix is : "<<medianmatrix(matrix,r,c)<<endl;
	return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------




















